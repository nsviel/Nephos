#version 450
#extension GL_EXT_debug_printf : enable

// Storage input
layout(binding = 20, r16ui) readonly uniform uimage2D tex_depth;
layout(binding = 21, rg32f) readonly uniform image2D xy_table;

// Storage output
layout(binding = 22, rgba32f) writeonly uniform image2D tex_cloud;

// Workgroup
layout(local_size_x = 1, local_size_y = 1) in;


void main(){
  //---------------------------

  // Initialize alpha for transparency; default to fully opaque.
  float alpha = 1.0f;

  // Retrieve the pixel coordinates for the current invocation.
  ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

  // Load the depth value from the depth texture at the given pixel location.
  float vertex_value = float(imageLoad(tex_depth, pixel));

  // Load the corresponding XY table value and check for invalid pixels
  vec2 xy_value = imageLoad(xy_table, pixel).xy;
  if(xy_value.x == 0.0f && xy_value.y == 0.0f){
    alpha = 0.0f;
    vertex_value = 0.0f;
  }

  // Compute the vertex position in 3D space using the depth value and XY table coordinates.
  float x = vertex_value * xy_value.x;
  float y = vertex_value * xy_value.y;
  float z = vertex_value;

  //Change to put data X axis and convert to meter
  vec3 vertex_position = vec3(z, -x, -y);
  vertex_position /= 1000.0f;

  // Store the computed vertex position and alpha value in the point cloud texture.
  imageStore(tex_cloud, pixel, vec4(vertex_position, alpha));

  //---------------------------
}
